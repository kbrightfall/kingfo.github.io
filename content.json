{"meta":{"title":"kingfo's workspace","subtitle":"","description":"","author":"kingfo","url":"https://kbrightfall.github.io/kingfo.github.io","root":"/kingfo.github.io/"},"pages":[{"title":"Repositories","date":"2021-12-09T08:04:46.273Z","updated":"2021-12-09T08:04:46.245Z","comments":false,"path":"repository/index.html","permalink":"https://kbrightfall.github.io/kingfo.github.io/repository/index.html","excerpt":"","text":""},{"title":"about","date":"2021-12-09T07:56:39.000Z","updated":"2021-12-09T12:36:57.616Z","comments":true,"path":"about/index.html","permalink":"https://kbrightfall.github.io/kingfo.github.io/about/index.html","excerpt":"","text":"任重而道远"},{"title":"tags","date":"2021-12-09T07:56:39.000Z","updated":"2021-12-09T08:03:13.135Z","comments":false,"path":"tags/index.html","permalink":"https://kbrightfall.github.io/kingfo.github.io/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-12-09T07:56:39.000Z","updated":"2021-12-09T08:01:34.799Z","comments":false,"path":"categories/index.html","permalink":"https://kbrightfall.github.io/kingfo.github.io/categories/index.html","excerpt":"","text":""},{"title":"links","date":"2021-12-09T08:05:35.000Z","updated":"2021-12-09T08:06:25.003Z","comments":true,"path":"links/index.html","permalink":"https://kbrightfall.github.io/kingfo.github.io/links/index.html","excerpt":"","text":""},{"title":"books","date":"2021-12-09T09:38:12.000Z","updated":"2021-12-09T09:38:27.007Z","comments":true,"path":"books/index.html","permalink":"https://kbrightfall.github.io/kingfo.github.io/books/index.html","excerpt":"","text":""}],"posts":[{"title":"vim configuration","slug":"vim-configuration","date":"2021-12-08T03:31:36.000Z","updated":"2021-12-09T12:54:17.789Z","comments":true,"path":"2021/12/08/vim-configuration/","link":"","permalink":"https://kbrightfall.github.io/kingfo.github.io/2021/12/08/vim-configuration/","excerpt":"","text":"基本配置vim在不安装组件的情况下拥有很多基本的功能，首先我们需要对常用的基本配置进行设置，基本配置已经足够日常使用，基本配置及其相关注释如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&quot; Basic Settingsset nocompatible&quot; detect file typefiletype on&quot; load plugin for detected file typefiletype plugin on&quot; load indent file for detected file typefiletype indent on&quot; syntax highlightsyntax onset encoding=UTF-8&quot; Add numbers to each line on the left-hand side.set number&quot; highlight current lineset cursorline&quot; Set shift width to 4 spaces.set shiftwidth=2&quot; Set tab width to 4 columns.set tabstop=4&quot; Use space characters instead of tabs.set expandtab&quot; Set indent styleset cindentset smartindentset autoindent&quot; Do not save backup files.set nobackup&quot; Do not let cursor scroll below or above N number of lines when scrolling.set scrolloff=10&quot; set fontset guifont=DroidSansMono_Nerd_Font:h11&quot; Use highlighting when doing a search.set hlsearch&quot; While searching though a file incrementally highlight matching characters as you type.set incsearch&quot; Ignore capital letters during search.set ignorecase&quot; Override the ignorecase option if searching for capital letters.&quot; This will allow you to search specifically for capital letters.set smartcase&quot; Show partial command you type in the last line of the screen.set showcmd&quot; Show the mode you are on the last line.set showmode&quot; Show matching words during a search.set showmatch&quot; Set the commands to save in history default number is 20.set history=1000&quot; Enable auto completion menu after pressing TAB.set wildmenu&quot; Make wildmenu behave like similar to Bash completion.set wildmode=list:longest&quot; There are certain files that we would never want to edit with Vim.&quot; Wildmenu will ignore files with these extensions.set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx 插件安装使用vim_plug插件管理器，并在vimrc配置文件中添加如下代码： 12345678910&quot; -------------------------------- Plugin -------------------------------------------&quot; Specify a directory for plugins&quot; - For Neovim: stdpath(&#x27;data&#x27;) . &#x27;/plugged&#x27;&quot; - Avoid using standard Vim directory names like &#x27;plugin&#x27;call plug#begin(&#x27;~/.vim/plugged&#x27;)&quot; Initialize plugin systemcall plug#end() 常用插件及管理将插件的名称与github上的仓库加入call plugin begin 与 end之间即可， 然后打开vim使用PlugInstall进行安装，插件管理命令如下所示： Command Description PlugInstall [name …] [#threads] Install plugins PlugUpdate [name …] [#threads] Install or update plugins PlugClean[!] Remove unlisted plugins (bang version will clean without prompt) PlugUpgrade Upgrade vim-plug itself PlugStatus Check the status of plugins PlugDiff Examine changes from the previous update and the pending changes NERDTree主要安装NERDTree以及git组件，可以在目录中显示git状态，加入如下两行代码进行安装： 12Plug &#x27;scrooloose/nerdtree&#x27;, &#123; &#x27;on&#x27;: &#x27;NERDTreeToggle&#x27; &#125;Plug &#x27;Xuyuanp/nerdtree-git-plugin&#x27; 插件相关配置如下： 1234567891011121314151617&quot; set NerdTree pluginnnoremap &lt;leader&gt;n :NERDTreeFocus&lt;CR&gt;nnoremap &lt;C-n&gt; :NERDTree&lt;CR&gt;nnoremap &lt;C-t&gt; :NERDTreeToggle&lt;CR&gt;&quot; nnoremap &lt;C-f&gt; :NERDTreeFind&lt;CR&gt;&quot; Start NERDTree when Vim starts with a directory argument.autocmd StdinReadPre * let s:std_in=1autocmd VimEnter * if argc() == 1 &amp;&amp; isdirectory(argv()[0]) &amp;&amp; !exists(&#x27;s:std_in&#x27;) | \\ execute &#x27;NERDTree&#x27; argv()[0] | wincmd p | enew | execute &#x27;cd &#x27;.argv()[0] | endif&quot; Exit Vim if NERDTree is the only window remaining in the only tab.autocmd BufEnter * if tabpagenr(&#x27;$&#x27;) == 1 &amp;&amp; winnr(&#x27;$&#x27;) == 1 &amp;&amp; exists(&#x27;b:NERDTree&#x27;) &amp;&amp; b:NERDTree.isTabTree() | quit | endif&quot; Close the tab if NERDTree is the only window remaining in it.autocmd BufEnter * if winnr(&#x27;$&#x27;) == 1 &amp;&amp; exists(&#x27;b:NERDTree&#x27;) &amp;&amp; b:NERDTree.isTabTree() | quit | endif&quot; Start NERDTree. If a file is specified, move the cursor to its window.autocmd StdinReadPre * let s:std_in=1autocmd VimEnter * NERDTree | if argc() &gt; 0 || exists(&quot;s:std_in&quot;) | wincmd p | endif Taglist功能：利用ctags生成当前文件所有的类以及类型符号使用taglist需要满足的条件有： 打开文件的自己检测功能：filetype on 系统中安装exuberant ctags工具 并且vim支持system()调用 然后在vimrc中添加安装taglist的地址： 1Plug &#x27;vim-scripts/taglist.vim&#x27; 安装之后进行相关的配置： 1234567&quot; set TagList pluginlet Tlist_Ctags_Cmd=&quot;/usr/local/bin/ctags&quot;let Tlist_Use_Right_Window = 1let Tlist_Exit_OnlyWindow = 1let Tlist_Show_One_File = 1&quot; let Tlist_Sort_Type = &quot;name&quot;let Tlist_Auto_Open = 1 DelimitMate功能：自动匹配括号与引号安装地址及相关配置如下： 12345678Plug &#x27;Raimondi/delimitMate&#x27;&quot; set DelimitMate plugin&quot; close auto close function&quot; let b:delimitMate_autoclose = 0&quot; close auto close function for python files&quot; au FileType python let b:delimitMate_autoclose = 0let delimitMate_expand_cr = 1 ctags &amp; cscope &amp; srcexpl功能：跳转功能的实现，方便在编写代码的时候查看类或者其它结构的实现安装srcexpl插件： 1Plug &#x27;wenlongche/SrcExpl&#x27; 安装后的配置如下: 123456789101112131415161718192021222324252627282930313233343536373839404142&quot; set ctags generation and pathfunction Generate_cstag() if(executable(&#x27;cscope&#x27;) &amp;&amp; has(&quot;cscope&quot;)) silent! execute &quot;!find -L `pwd` -name &#x27;*.h&#x27; -o -name &#x27;*.c&#x27; -o -name &#x27;*.cc&#x27; -o -name &#x27;*.cpp&#x27; -o -name &#x27;*.java&#x27; -o -name &#x27;*.cxx&#x27; -o -name &#x27;*.hxx&#x27; -o -name &#x27;*.hpp&#x27; -o -name &#x27;*.py&#x27; &gt; cscope.files&quot; endif silent! execute &quot;!ctags -L cscope.files&quot; silent! execute &quot;!cscope -bkq -i cscope.files&quot; silent! execute &quot;call Add_cstag()&quot;endffunction Add_cstag() if filereadable(&quot;cscope.out&quot;) execute &quot;cs add cscope.out&quot; execute &quot;set tags+=./tags&quot; endifendfsilent! execute &quot;call Add_cstag()&quot;map &lt;F10&gt; :call Generate_cstag()&lt;CR&gt;map &lt;F10&gt;&lt;F10&gt; :call Add_cstag()&lt;CR&gt;nmap &lt;C-\\&gt;s :cs find s &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;C-\\&gt;g :cs find g &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;C-\\&gt;c :cs find c &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;C-\\&gt;t :cs find t &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;C-\\&gt;e :cs find e &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;C-\\&gt;f :cs find f &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;C-\\&gt;i :cs find i &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;C-\\&gt;d :cs find d &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;&quot; set srcexpl pluginnmap &lt;F8&gt; :SrcExplToggle&lt;CR&gt;let g:SrcExpl_winHeight = 16let g:SrcExpl_refreshTime = 100let g:SrcExpl_jumpKey = &quot;&lt;ENTER&gt;&quot;let g:SrcExpl_gobackKey = &quot;&lt;SPACE&gt;&quot;let g:SrcExpl_searchLocalDef = 1let g:SrcExpl_isUpdateTags = 0let g:SrcExpl_updateTagsCmd = &quot;ctags --sort=foldcase -R .&quot;let g:SrcExpl_updateTagsKey = &quot;&lt;F12&gt;&quot;let g:SrcExpl_prevDefKey = &quot;&lt;F3&gt;&quot;let g:SrcExpl_nextDefKey = &quot;&lt;F4&gt;&quot;","categories":[],"tags":[{"name":"tools","slug":"tools","permalink":"https://kbrightfall.github.io/kingfo.github.io/tags/tools/"}]}],"categories":[],"tags":[{"name":"tools","slug":"tools","permalink":"https://kbrightfall.github.io/kingfo.github.io/tags/tools/"}]}